{"mappings":"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","sources":["src/EventBus.js"],"sourcesContent":["/**\r\n * Created by Rick on 2022-05-26.\r\n */\r\n'use strict';\r\n\r\nexport default class EventBus {\r\n  constructor() {\r\n    // initialize event list\r\n    this.eventObject = {};\r\n    // id of the callback function list\r\n    this.callbackId = 0;\r\n  }\r\n  // publish event\r\n  publish(eventName, ...args){\r\n    // Get all the callback functions of the current event\r\n    const callbackObject = this.eventObject[eventName];\r\n\r\n    if(!callbackObject) return console.warn(`${eventName} not found`);\r\n\r\n    // execute each callback function\r\n    for(let id in callbackObject){\r\n      // pass parameters when executiong\r\n      callbackObject[id](...args);\r\n\r\n      // The callback function that is only subscribed once needs to be deleted\r\n      if(id[0] === 'd'){\r\n        delete callbackObject[id];\r\n      }\r\n    }\r\n  }\r\n  // Subscribe to events\r\n  subscribe(eventName, callback){\r\n    // initialize this event\r\n    if(!this.eventObject[eventName]){\r\n      // Use object storage to improve the efficiency of deletion when logging out the callback\r\n      this.eventObject[eventName] = {};\r\n    }\r\n    const id = this.callbackId++;\r\n\r\n    // store the callback function of the subscriber\r\n    // callbackId needs to be incremented after use for the next callback function\r\n    this.eventObject[eventName][id] = callback;\r\n\r\n    // Every time you subscribe to an event, a unique unsubscribe function is generated\r\n    const unSubscribe = () => {\r\n      //clear the callback function of this subscriber\r\n      delete this.eventObject[eventName][id];\r\n\r\n      // If this event has no subscribers, also clear the entire event object\r\n      if(Object.keys(this.eventObject[eventName]).length === 0){\r\n        delete this.eventObject[eventName];\r\n      }\r\n    };\r\n\r\n    // return the unsubscribe function to subscriber\r\n    return {unSubscribe};\r\n  }\r\n\r\n  // Only subscribe once\r\n  subscribeOnce(eventName, callback){\r\n    // initialize this event\r\n    if(!this.eventObject[eventName]){\r\n      // Use object storage to improve the efficiency of deletion when logging out the callback\r\n      this.eventObject[eventName] = {};\r\n    }\r\n    const id = 'd' + this.callbackId++;\r\n\r\n    // store the callback function of the subscriber\r\n    // callbackId needs to be incremented after use for the next callback function\r\n    this.eventObject[eventName][id] = callback;\r\n\r\n    // Every time you subscribe to an event, a unique unsubscribe function is generated\r\n    const unSubscribe = () => {\r\n      //clear the callback function of this subscriber\r\n      delete this.eventObject[eventName][id];\r\n\r\n      // If this event has no subscribers, also clear the entire event object\r\n      if(Object.keys(this.eventObject[eventName]).length === 0){\r\n        delete this.eventObject[eventName];\r\n      }\r\n    };\r\n\r\n    // return the unsubscribe function to subscriber\r\n    return {unSubscribe};\r\n  }\r\n\r\n  // clear event\r\n  clear(eventName){\r\n    // If no event name is provided, all events are cleared by default\r\n    if(!eventName){\r\n      this.eventObject = {};\r\n    }else {\r\n      // clear the specified event\r\n      delete this.eventObject[eventName];\r\n    }\r\n  }\r\n}\r\n\r\n"],"names":[],"version":3,"file":"EventBus.js.map"}